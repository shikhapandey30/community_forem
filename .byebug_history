c
Time.now.in_time_zone("UTC")
@post.last.created_at
Time.now.in_time_zone("UTC")-
Time.now.in_time_zone("UTC")
@post.last.created_at.in_time_zone("UTC")
@post.last.created_at.in_time_zone("IST")
@post.last.created_at.in_time_zone("UTC")
@post.last.created_at.in_time_zone(Time.now.zone)
Time.in_time_zone(a)
Date.in_time_zone(a)
DateTime.in_time_zone(a)
(Time.now - DateTime.in_time_zone(a)/14400
(Time.now - Date.in_time_zone(a)/14400
(Time.now - in_time_zone(a)/14400
a =@post.last.created_at
Time.now.zone
Time.now
(Time.now - @post.last.created_at)/14400
(Time.now - @post.last.created_at)/86400
(Time.now - @post.last.created_at)/86400*24/60
(Time.now - @post.last.created_at)/86400*24*60
(Time.now - @post.last.created_at)/86400*24
(Time.now - @post.last.created_at)/86400
(Time.now - @post.last.created_at)/86400*60
(Time.now - @post.last.created_at)/86400
Time.now - @post.last.created_at
86400/1440
86400/144
(Time.now.to_datetime - @post.last.created_at.to_datetime)
(Time.now.to_datetime - @post.last.created_at.to_datetime).to_i
(Time.now.to_date - @post.last.created_at.to_date).to_i
Time.now.to_date - @post.last.created_at.to_date
Time.now.to_date
Time.now
@post.last.created_at
Time.now-@post.last.created_at
@post.last.created_at
@post.last.created_at-Time.now
@post.last.created_at
post.created_at
post
c
v
@post
post
c
~~c
c
user_signed_in?
current_user
c
u.object
c
v
c
Upload.all
@post.save
@post.build_upload(image: params[:post][:image])
@post.build_upload(params[:post][:image])
params[:post][:image]
@post.build_upload(params[:post][:image])
@post.build_upload
@post.upload
@post.save
@post = current_user.posts.new(post_params)
c
@post.build_upload
@post.upload
@post
Upload.all
@post.save
@post = current_user.posts.new(post_params)
c
@post.build_upload
@post.upload
@post.uploadable
@post.uploads
@post.upload
@post
@post.save
@post = current_user.posts.new(post_params)
params
find_uploadable
Upload.all
@post.save
@post = current_user.posts.new(post_params)
params
c
Upload.all
@post.save
@post = current_user.posts.new(post_params)
@post.save@post = current_user.posts.new(post_params)
@post.save
current_user.posts.new(post_params)
params
c
devise_error_messages!
c
resource.errors.full_messages.map { |msg| content_tag(:p, msg) }.join
resource.errors.full_messages.map { |msg| content_tag(:ul,:li, msg) }.join
resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join
c
flash.alert
flash
devise_error_messages!
f.object.errors
f.object
f.error.messages
resource.errors
resource.messages
resource
devise_error_messages!
c
devise_error_messages!
c
request.url.include?("sign") || request.url.include?("password")
 request.url.include?("sign") || "password"
request.url.include?("sign" || "password")
request.url.include?("password")
request.url.include?("sign")
request.url.include?("sign" || "password")
c
current_user.users_category
current_user.users_category.destroy
category.save
category = current_user.build_users_category(:category_ids=>params[:category_ids].join(','))
current_user.build_users_category(:category_ids=>params[:category_ids].join(','))
current_user.users_category
current_user.users_category.destroycurrent_user.users_category
current_user.users_category.destroy
current_user.build_users_category(:category_ids=>params[:category_ids].join(','))
current_user.users_category
current_user.users_category.update(:category_ids=>params[:category_ids].join(','))
current_user.users_category.present?
params
paramas
c
current_user.build_users_category(:category_ids=>params[:category_ids].join(','))
params
c
current_user.build_users_category(:category_ids=>params[:category_ids].join(','))
current_user.users_category
current_user.users_category.present?
params
c
@skill = current_user.skill.update(name: params[:name])
current_user.skill.update_@skill = current_user.skill.update(name: params[:name])attributes(name: params[:name])
current_user.skill.update_attributes(name: params[:name])
@skill.update_attributes(name: params[:name])
current_user.skill@skill.update_attributes(name: params[:name])
current_user.skill
params
params[:id].present?
c
@skill
c
@skill.save
@skill = current_user.build_skill(name: params[:name])
@employment = current_user.build_skill(name: params[:name])
@employment = current_user.skill.create(name: params[:name])
params[:name]
params
params[:id].present?
current_userparams[:id].present?
params
c
EducationHistory.find(params[:id])
current_user.education_histories.find(45)
current_user.education_histories.find(params[:id])
@employment = current_user.employment_details.find(1)
@employment = current_user.employment_details.find(2)
@employment = current_user.employment_details.find(3)
@employment = current_user.employment_details.find(params[:id])
 current_user.employment_details
current_user.education_histories.find(2)
current_user.education_histories.find(params[:id])
current_user.education_histories
current_user.education_histories.create(education_params)
education_params
params[:id].present?
c
 auth.try(:info).try(:name)
 auth.try(:info),try(:name)screen_name: auth.try(:info).try(:name)
 auth.try(:info),try(:name)
auth.info.name
auth.info
c
auth.info
authenticate.user
authenticate = where(provider: auth['provider'], :uid=>auth['uid']).first_or_initialize
authenticate.user
c
authenticate.user.update
authenticate.user
register_user = User.find_by(email: auth.info.email)
authenticate = where(provider: auth['provider'], :uid=>auth['uid']).first_or_initialize
auth.info.name
auth.info
auth.extra.raw_info
auth.raw_info
auth
c
user
user.save!(:validate => false)
user.save!(:validate => false)user.save!(:validate => false)
user.password =  Devise.friendly_token.first(8)
user.confirmed_at = Time.now
user.email.blank?
user.email = auth.info.try(:email)
user.email = auth.info.email
user.last_name = auth.try(:info).try(:last_name)
user.first_name = auth.try(:info).try(:first_name)
auth.info.first_name
auth.info
user = User.new
User.new
register_user.authenticates.create(provider: auth['provider'], :uid=>auth['uid'])
Authenticate
Autheticate.newAuthenticate
Autheticate.new
 register_user
authenticate.user
register_user = User.find_by(email: auth.info.email)
authenticate = where(provider: auth['provider'], :uid=>auth['uid']).first_or_initialize
register_user
register_user = User.find_by(email: auth.info.email)
User.find_by(email: auth.info.email)
auth.uid
auth.provider
auth
 authenticate.user
authenticate = where(provider: auth['provider'], :uid=>auth['uid']).first_or_initialize
c
User.find_by(email: auth.info.email)c
User.find_by(email: auth.info.email)
self
user.email = auth.info.email
authenticate.uid = auth.uid
authenticate.provider = auth.provider
user = User.new
authenticate.user
authenticate = where(provider: auth['provider'], :uid=>auth['uid']).first_or_initialize
c
"background-image: url(#{p.object.try(:image).try(:url)})" if p.object.try(:image).try(:url).strip
"background-image: url(#{p.object.try(:image).try(:url)})" if p.object.try(:image).try(:url)
c
"background-image: url(#{p.object.try(:image).try(:url)})" if p.object.try(:image).try(:url)
p.object.try(:image).try(:url)
c
params.require(:user).permit!
params.require(:profile).permit!
params
c
f.object.send(attribute)
c
